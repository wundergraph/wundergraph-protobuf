syntax = "proto3";
package wgpb;

import "google/protobuf/duration.proto";

option go_package = "wgpb";

message WunderNodeConfig {
    Server server = 1;
    Logging logging = 2;
    repeated Api apis = 3;
}

message Server {
    google.protobuf.Duration gracefulShutdownTimeout = 1;
    google.protobuf.Duration keepAlive = 2;
    google.protobuf.Duration readTimeout = 3;
    google.protobuf.Duration writeTimeout = 4;
    google.protobuf.Duration idleTimeout = 5;
    repeated Certificate certificates = 6;
}

message Certificate {
    string keyPem = 2;
    string certPem = 3;
}

message Logging {
    LogLevel level = 1;
}

enum LogLevel {
    DEBUG = 0;
    INFO = 1;
    ERROR = 2;
    WARNING = 3;
    PANIC = 4;
    FATAL = 5;
}

message Api {
    repeated string hosts = 1;
    string pathPrefix = 2;
    EngineConfiguration engineConfiguration = 3;
    bool enableSingleFlight = 4;
    bool enableGraphqlEndpoint = 5;
    repeated Operation operations = 6;
    CorsConfiguration corsConfiguration = 7;
    string primaryHost = 8;
    string deploymentId = 9;
}

message Operation {
    string name = 1;
    string content = 2;
    OperationType operationType = 3;
    string variablesSchema = 4;
    string responseSchema = 5;
    OperationMock mock = 6;
}

message OperationMock {
    bool enabled = 1;
    string endpoint = 2;
    int64 subscriptionPollingIntervalMillis = 3;
}

enum OperationType {
    QUERY = 0;
    MUTATION = 1;
    SUBSCRIPTION = 2;
}

message EngineConfiguration {
    int64 defaultFlushInterval = 1;
    repeated DataSourceConfiguration datasourceConfigurations = 2;
    repeated FieldConfiguration fieldConfigurations = 3;
    string graphqlSchema = 4;
}

message DataSourceConfiguration {
    DataSourceKind kind = 1;
    repeated TypeField rootNodes = 2;
    repeated TypeField childNodes = 3;
    bool overrideFieldPathFromAlias = 4;
    DataSourceCustom_REST customRest = 5;
    DataSourceCustom_GraphQL customGraphql = 6;
    DataSourceCustom_Static customStatic = 7;
}

enum DataSourceKind {
    STATIC = 0;
    REST = 1;
    GRAPHQL = 2;
}

message DataSourceCustom_REST {
    FetchConfiguration fetch = 1;
    RESTSubscriptionConfiguration subscription = 2;
}

message DataSourceCustom_GraphQL {
    FetchConfiguration fetch = 1;
    GraphQLSubscriptionConfiguration subscription = 2;
    GraphQLFederationConfiguration federation = 3;
}

message GraphQLFederationConfiguration {
    bool enabled = 1;
    string serviceSdl = 2;
}

message DataSourceCustom_Static {
    string data = 1;
}

message GraphQLSubscriptionConfiguration {
    bool enabled = 1;
    string url = 2;
}

message FetchConfiguration {
    string url = 1;
    HTTPMethod method = 2;
    map<string, HTTPHeader> header = 3;
    string body = 4;
    repeated URLQueryConfiguration query = 5;
}

message RESTSubscriptionConfiguration {
    bool enabled = 1;
    int64 pollingIntervalMillis = 2;
    bool skipPublishSameResponse = 3;
}

message URLQueryConfiguration {
    string name = 1;
    string value = 2;
}

message HTTPHeader {
    repeated string values = 1;
}

enum HTTPMethod {
    GET = 0;
    POST = 1;
    PUT = 2;
    DELETE = 3;
}

message FieldConfiguration {
    string typeName = 1;
    string fieldName = 2;
    bool disableDefaultFieldMapping = 3;
    repeated string path = 4;
    bool respectOverrideFieldPathFromAlias = 5;
    repeated ArgumentConfiguration argumentsConfiguration = 6;
    repeated string requiresFields = 7;
}

message TypeField {
    string typeName = 1;
    repeated string fieldNames = 2;
}

enum ArgumentSource {
    OBJECT_FIELD = 0;
    FIELD_ARGUMENT = 1;
}

message ArgumentConfiguration {
    string name = 1;
    ArgumentSource sourceType = 2;
    repeated string sourcePath = 3;
}

message DataUsageMetric {
    string host = 1;
    int64 inboundReadBytes = 2;
    int64 inboundWriteBytes = 3;
    int64 outboundReadBytes = 4;
    int64 outboundWriteBytes = 5;
}

message WunderNodeMetrics {
    repeated DataUsageMetric dataUsage = 1;
}

message WunderGraphConfiguration {
    UserDefinedApi api = 1;
}

message UserDefinedApi {
    EngineConfiguration engineConfiguration = 3;
    bool enableGraphqlEndpoint = 5;
    repeated Operation operations = 6;
    CorsConfiguration corsConfiguration = 7;
}

message CorsConfiguration {
    // AllowedOrigins is a list of origins a cross-domain request can be executed from.
    // If the special "*" value is present in the list, all origins will be allowed.
    // An origin may contain a wildcard (*) to replace 0 or more characters
    // (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penalty.
    // Only one wildcard can be used per origin.
    // Default value is ["*"]
    repeated string allowedOrigins = 1;
    // AllowedMethods is a list of methods the client is allowed to use with
    // cross-domain requests. Default value is simple methods (HEAD, GET and POST).
    repeated string allowedMethods = 2;
    // AllowedHeaders is list of non simple headers the client is allowed to use with
    // cross-domain requests.
    // If the special "*" value is present in the list, all headers will be allowed.
    // Default value is [] but "Origin" is always appended to the list.
    repeated string allowedHeaders = 3;
    // ExposedHeaders indicates which headers are safe to expose to the API of a CORS
    // API specification
    repeated string exposedHeaders = 4;
    // MaxAge indicates how long (in seconds) the results of a preflight request
    // can be cached
    int64 maxAge = 5;
    // AllowCredentials indicates whether the request can include user credentials like
    // cookies, HTTP authentication or client side SSL certificates.
    bool allowCredentials = 6;
}